<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on JavaScript, build tools, modern dev workflow | Jason Lengstorf</title>
    <link>https://code.lengstorf.com/tag/ajax/</link>
    <description>Recent content in Ajax on JavaScript, build tools, modern dev workflow | Jason Lengstorf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Aug 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://code.lengstorf.com/tag/ajax/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Convert HTML Form Field Values to a JSON Object</title>
      <link>https://code.lengstorf.com/get-form-values-as-json/</link>
      <pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://code.lengstorf.com/get-form-values-as-json/</guid>
      <description>

&lt;p&gt;Using AJAX is really common, but it&amp;rsquo;s still tricky to get the values out of a form without using a library.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s because it seems pretty intimidating to set up all the loops and checks required to deal with parsing a form and all its child elements. You get into &lt;a href=&#34;http://stackoverflow.com/a/9329476/463471&#34;&gt;heavy discussions of whether you should use &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;for...in&lt;/code&gt;, &lt;code&gt;for...of&lt;/code&gt;, or &lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt;, and after trying to keep up with the various performance, semantic, and stylistic reasons for making those choices, your brain starts to liquefy and drip out your ears — at which point it&amp;rsquo;s easy to just say, &amp;ldquo;Fuck it; let&amp;rsquo;s just use jQuery.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But for simple sites that don&amp;rsquo;t need much beyond grabbing form data as an object to use with JSON&lt;/strong&gt;, jQuery (or any big library or framework) includes a lot of overhead for only one or two functions that you&amp;rsquo;ll be using.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:homework&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:homework&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So in this walkthrough, we&amp;rsquo;ll be writing our own script — in plain JavaScript  — to pull the values of a form&amp;rsquo;s fields into an object, which we could then use for AJAX, updating information on other parts of the page, and anything else you might want to do with a form&amp;rsquo;s data.&lt;/p&gt;

&lt;h2 id=&#34;what-we-ll-be-building&#34;&gt;What We&amp;rsquo;ll Be Building&lt;/h2&gt;

&lt;p&gt;At the end of this walkthrough, we&amp;rsquo;ll have built the form shown in this pen:&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;1000&#34; data-theme-id=&#34;dark&#34; data-slug-hash=&#34;YWJLwz&#34; data-default-tab=&#34;result&#34; data-user=&#34;jlengstorf&#34; data-embed-version=&#34;2&#34; class=&#34;codepen&#34;&gt;See the Pen &lt;a href=&#34;http://codepen.io/jlengstorf/pen/YWJLwz/&#34;&gt;How to Get Form Field Data as JSON Using Plain JavaScript&lt;/a&gt; by Jason Lengstorf (&lt;a href=&#34;http://codepen.io/jlengstorf&#34;&gt;@jlengstorf&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;If you fill the form and hit the &amp;ldquo;Send It!&amp;rdquo; button, the form data will be output as JSON in the &amp;ldquo;Form Data&amp;rdquo; section below.&lt;/p&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To show that &lt;code&gt;hidden&lt;/code&gt; inputs will be included, an input called &lt;code&gt;secret&lt;/code&gt; has been included in this form. Its value is a random GUID.&lt;/p&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;before-we-get-started-goals-and-plans&#34;&gt;Before We Get Started: Goals and Plans&lt;/h2&gt;

&lt;p&gt;To save ourselves a lot of headache and heartache, we&amp;rsquo;re going to &lt;a href=&#34;https://lengstorf.com/effective-project-planning/&#34;&gt;start our project with an clear plan&lt;/a&gt;. This&amp;rsquo;ll keep our goals clear, and helps define the structure and purpose of the code before we ever write a line.&lt;/p&gt;

&lt;h3 id=&#34;start-with-a-goal-what-should-we-end-up-with&#34;&gt;Start with a goal: what should we end up with?&lt;/h3&gt;

&lt;p&gt;Before we write any JavaScript, let&amp;rsquo;s start by deciding how we want the output to look.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;ve filled out the form above completely, we&amp;rsquo;d want the resulting object to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;salutation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Mr.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Jason Lengstorf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;jason@lengstorf.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a general question.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Is this thing on?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;snacks&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pizza&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each field&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; attribute is used as the object&amp;rsquo;s key, and the field&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; is set as the object&amp;rsquo;s value.&lt;/p&gt;

&lt;p&gt;This is ideal, because it means that we can do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// Find our form in the DOM using its class name.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementByClassName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.contact-form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Get the form data with our (yet to be defined) function.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getFormDataAsJSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Do something with the email address.&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;doSomething&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is straightforward, easy to read as a human, and also easy to send to  APIs that accept &lt;code&gt;application/json&lt;/code&gt; data in requests (which is most of them these days).&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s shoot for that.&lt;/p&gt;

&lt;h3 id=&#34;make-a-plan-how-can-we-convert-form-fields-to-json&#34;&gt;Make a plan: how can we convert form fields to JSON?&lt;/h3&gt;

&lt;p&gt;When we&amp;rsquo;re finished, our JavaScript should accomplish the following goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Capture the form&amp;rsquo;s &lt;code&gt;submit&lt;/code&gt; event and prevent the default submission.&lt;/li&gt;
&lt;li&gt;Convert the form&amp;rsquo;s child elements to JSON.&lt;/li&gt;
&lt;li&gt;Check to make sure only form field elements are added to the object.&lt;/li&gt;
&lt;li&gt;Add a safeguard to only store checkable fields if the &lt;code&gt;checked&lt;/code&gt; attribute is set.&lt;/li&gt;
&lt;li&gt;Handle inputs that allow multiple values, like checkboxes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Ready to flex that sexy-ass brain?&lt;/strong&gt; Create a fork of the &lt;a href=&#34;http://codepen.io/jlengstorf/pen/GqYZra&#34;&gt;markup-and-styles-only pen&lt;/a&gt;, and let&amp;rsquo;s jump in and start writing some JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;getting-started-create-a-form-for-testing&#34;&gt;Getting Started: Create a Form for Testing&lt;/h2&gt;

&lt;p&gt;To avoid the hassle of setting up front-end tooling (we&amp;rsquo;re using Babel to transpile the newer features of JavaScript, such as &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/apC.md#appendix-c-lexical-this&#34;&gt;fat-arrow functions&lt;/a&gt;), we&amp;rsquo;re going to work through this project on Codepen.&lt;/p&gt;

&lt;p&gt;To start, create a fork of &lt;a href=&#34;http://codepen.io/jlengstorf/pen/GqYZra/&#34;&gt;this pen&lt;/a&gt;, which contains form markup with common inputs, and some styles to make it display nicely.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;1000&#34; data-theme-id=&#34;dark&#34; data-slug-hash=&#34;GqYZra&#34; data-default-tab=&#34;result&#34; data-user=&#34;jlengstorf&#34; data-embed-version=&#34;2&#34; class=&#34;codepen&#34;&gt;See the Pen &lt;a href=&#34;http://codepen.io/jlengstorf/pen/GqYZra/&#34;&gt;How to Get Form Field Data as JSON Using Plain JavaScript (Starter — No JS)&lt;/a&gt; by Jason Lengstorf (&lt;a href=&#34;http://codepen.io/jlengstorf&#34;&gt;@jlengstorf&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The markup is written in Jade (which was recently renamed to &lt;a href=&#34;https://github.com/pugjs/pug&#34;&gt;Pug&lt;/a&gt;) because I find it faster and easier to read. If you prefer to look at plain HTML, you can hit the &amp;ldquo;view compiled&amp;rdquo; button at the bottom right of the Jade pane in the pen above.&lt;/p&gt;
&lt;/aside&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The styles for the form use &lt;a href=&#34;http://getbem.com/naming/&#34;&gt;BEM-style naming conventions&lt;/a&gt;, and I&amp;rsquo;m using &lt;a href=&#34;http://postcss.org/&#34;&gt;PostCSS&lt;/a&gt; to make it easy to group my styles together without &lt;em&gt;actually&lt;/em&gt; creating nested CSS. For me, this is &lt;em&gt;far&lt;/em&gt; easier to read than other ways of writing CSS, but if you prefer regular CSS, click the &amp;ldquo;view compiled&amp;rdquo; button at the bottom-right of the PostCSS pane in the pen above.&lt;/p&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;step-1-add-a-listener-to-the-submit-event-for-the-form&#34;&gt;Step 1: Add a Listener to the &lt;code&gt;submit&lt;/code&gt; Event for the Form&lt;/h2&gt;

&lt;p&gt;Before we do anything else, we need to listen for the &lt;code&gt;submit&lt;/code&gt; event on our form, and prevent it from doing its usual thing.&lt;/p&gt;

&lt;p&gt;To do this, let&amp;rsquo;s create a function called &lt;code&gt;handleSubmit()&lt;/code&gt;, then use &lt;code&gt;getElementsByClassName()&lt;/code&gt; to find our form, and attach the function to the form&amp;rsquo;s &lt;code&gt;submit&lt;/code&gt; event.&lt;/p&gt;

&lt;h3 id=&#34;create-a-handlesubmit-function&#34;&gt;Create a &lt;code&gt;handleSubmit()&lt;/code&gt; function.&lt;/h3&gt;

&lt;p&gt;At the moment, this function isn&amp;rsquo;t going to do much. To start, we&amp;rsquo;ll prevent the default &lt;code&gt;submit&lt;/code&gt; action, create a variable called &lt;code&gt;data&lt;/code&gt; to store the output (which we&amp;rsquo;ll be building in a moment), then find our output container and print out the &lt;code&gt;data&lt;/code&gt; variable as JSON.&lt;/p&gt;

&lt;p&gt;In order to prevent the default action, this function needs to accept one argument: the &lt;code&gt;event&lt;/code&gt; that&amp;rsquo;s created when the user clicks the submit button on the form. We can stop the form from submitting the usual way (which triggers the browser to go somewhere else) using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault&#34;&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * A handler function to prevent default submission and run our custom script.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {Event} event  the submit event triggered by the user&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {void}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handleFormSubmit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Stop the form from submitting since we’re handling that with AJAX.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preventDefault&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// TODO: Call our function to get the form data.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{};&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Demo only: print the form data onscreen as a formatted JSON object.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dataContainer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementsByClassName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;results__display&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Use `JSON.stringify()` to make the output valid, human-readable JSON.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;dataContainer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;textContent&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stringify&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// ...this is where we’d actually do something with the form data...&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;data&lt;/code&gt; variable is not JSON &lt;em&gt;yet&lt;/em&gt;. This is kind of confusing at first, but it&amp;rsquo;s a matter of nuance. Typically, a function that converts &amp;ldquo;to JSON&amp;rdquo; is &lt;em&gt;actually&lt;/em&gt; converting to an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals&#34;&gt;object literal&lt;/a&gt;. This allows us to access the data using JavaScript. In order to convert that data to a valid JSON string, we need to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&#34;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;

&lt;h3 id=&#34;attach-an-event-listener-to-the-form&#34;&gt;Attach an event listener to the form.&lt;/h3&gt;

&lt;p&gt;With the event handler created, we need to add a listener to the form so we can actually handle the event.&lt;/p&gt;

&lt;p&gt;To do this, we use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName&#34;&gt;&lt;code&gt;getElementsByClassName()&lt;/code&gt;&lt;/a&gt; to target the form, then store the first item in the resulting collection as &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&#34;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;, we hook &lt;code&gt;handleSubmit()&lt;/code&gt; to the &lt;code&gt;submit&lt;/code&gt; event, which will allow it to run whenever the user clicks to submit the form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handleFormSubmit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/* omitted for brevity */&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * This is where things actually get started. We find the form element using&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * its class name, then attach the `handleFormSubmit()` function to the &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * `submit` event.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementsByClassName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;contact-form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;addEventListener&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handleFormSubmit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point we can test that things are working properly by clicking the &amp;ldquo;Send It!&amp;rdquo; button on the form. We should see &lt;code&gt;{}&lt;/code&gt; in the &amp;ldquo;Form Data&amp;rdquo; output box.&lt;/p&gt;

&lt;h2 id=&#34;step-2-extract-the-values-of-form-fields-as-json&#34;&gt;Step 2: Extract the Values of Form Fields As JSON&lt;/h2&gt;

&lt;p&gt;Next up, we need to actually grab values from the form fields.&lt;/p&gt;

&lt;p&gt;To do this, we&amp;rsquo;ll use something that — at first — might look scary as shit: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&#34;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; combined with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll dive into the dirty details of what &lt;code&gt;reduce()&lt;/code&gt; is actually doing in the next section, but for now let&amp;rsquo;s focus on how we&amp;rsquo;re actually using it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Retrieves input data from a form and returns it as a JSON object.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {HTMLFormControlsCollection} elements  the form elements&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {Object}                               form data as an object literal&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{});&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handleFormSubmit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Stop the form from submitting since we’re handling that with AJAX.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preventDefault&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Call our function to get the form data.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// Demo only: print the form data onscreen as a formatted JSON object.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dataContainer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementsByClassName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;results__display&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Use `JSON.stringify()` to make the output valid, human-readable JSON.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;dataContainer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;textContent&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stringify&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// ...this is where we’d actually do something with the form data...&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementsByClassName&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;contact-form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;addEventListener&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handleFormSubmit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I know. &lt;em&gt;I know.&lt;/em&gt; It looks hairy. But let&amp;rsquo;s dig in and see what this is doing.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s break this into its component parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have a function called &lt;code&gt;formToJSON()&lt;/code&gt;, which accepts one argument: &lt;code&gt;form&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inside that function, we return the value of &lt;code&gt;[].reduce.call()&lt;/code&gt;, which accepts three arguments: a form, a function, and an empty object literal (&lt;code&gt;{}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The function argument accepts the arguments &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;child&lt;/code&gt;, and adds a new property with the key of &lt;code&gt;child.name&lt;/code&gt; and the value &lt;code&gt;child.value&lt;/code&gt;, finally returning the &lt;code&gt;data&lt;/code&gt; object&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;After we&amp;rsquo;ve added that code to our pen, we need to call the function from &lt;code&gt;handleSubmit()&lt;/code&gt;.&lt;/strong&gt; Find &lt;code&gt;const data = {};&lt;/code&gt; inside the function and replace it with &lt;code&gt;const data = formToJSON(form.elements);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can run it by clicking the &amp;ldquo;Send It!&amp;rdquo; button will now output this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;salutation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ms.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;snacks&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cake&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are some issues here — for example, neither &amp;ldquo;Ms.&amp;rdquo; nor &amp;ldquo;Cake&amp;rdquo; was actually selected on the form, and there&amp;rsquo;s an empty entry at the bottom (which is our button) — but this isn&amp;rsquo;t too bad for a first step.&lt;/p&gt;

&lt;p&gt;So how did that just happen? Let&amp;rsquo;s go step by step to figure it out.&lt;/p&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements&#34;&gt;&lt;code&gt;form.elements&lt;/code&gt;&lt;/a&gt;, we get pretty decent access to the form. For example, we can get the email using &lt;code&gt;form.elements.email.value&lt;/code&gt;. However, if we need to convert this to JSON for use with AJAX, it&amp;rsquo;s a disaster due to its inclusion of numerical indexes, IDs, and names. You can see this for yourself by adding &lt;code&gt;console.log(JSON.stringify(form.elements));&lt;/code&gt; to &lt;code&gt;handleSubmit()&lt;/code&gt;. That&amp;rsquo;s why we&amp;rsquo;re building our own function instead of just using this built-in access.&lt;/p&gt;
&lt;/aside&gt;

&lt;h3 id=&#34;step-2-1-understand-how-reduce-works&#34;&gt;Step 2.1 — Understand how &lt;code&gt;reduce()&lt;/code&gt; works.&lt;/h3&gt;

&lt;p&gt;The simplest explanation for &lt;code&gt;reduce()&lt;/code&gt; is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method uses a function to convert an array into a single value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This method is part of the &lt;code&gt;Array&lt;/code&gt; prototype, so it can be applied to any array value.&lt;/p&gt;

&lt;p&gt;It takes two arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A reducer function, which is required.&lt;/li&gt;
&lt;li&gt;An initial value, which is optional (defaults to &lt;code&gt;0&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reducer function is applied to each element of the array. This function accepts four arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The value returned by the reducer function when it ran on the previous element (or the initial value, if this is the first element).&lt;/li&gt;
&lt;li&gt;The current array element.&lt;/li&gt;
&lt;li&gt;The current array index.&lt;/li&gt;
&lt;li&gt;The whole array, in case the reducer needs a reference to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For our reducer, we only need the first two arguments.&lt;/p&gt;

&lt;h4 id=&#34;a-really-simple-example-of-reducing-an-array&#34;&gt;A really simple example of reducing an array.&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s say we have an array of numbers, which represent sales for the day:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sales&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100.12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;19.49&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42.18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;99.62&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to determine total sales for the day, so we set up this simple function to add up sales:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getTotalSales&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;previousTotal&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;currentSaleAmount&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;previousTotal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;currentSaleAmount&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we use &lt;code&gt;reduce()&lt;/code&gt; to apply the function to the array of sales:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sales&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100.12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;19.49&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42.18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;99.62&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getTotalSales&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;previousTotal&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;currentSaleAmount&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;previousTotal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;currentSaleAmount&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;sales&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getTotalSales&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// result: 271.41&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; You can run these examples in your browser&amp;rsquo;s console to see the results for yourself.&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Now, if we want to condense this code a little, we can actually write the whole thing like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sales&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100.12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;19.49&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;42.18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;99.62&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;sales&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;prev&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;curr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;curr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// result: 271.41&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When this is called, &lt;code&gt;reduce()&lt;/code&gt; starts with &lt;code&gt;0&lt;/code&gt; as the value of &lt;code&gt;prev&lt;/code&gt;, and takes the first element of the array, &lt;code&gt;100.12&lt;/code&gt;, as the value of &lt;code&gt;curr&lt;/code&gt;. It adds those together and returns them.&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;reduce()&lt;/code&gt; moves to the second element in the array, &lt;code&gt;19.49&lt;/code&gt;, and this time the value of &lt;code&gt;prev&lt;/code&gt; is the value returned last time: &lt;code&gt;100.12&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This process is repeated until all of the elements have been added together, and we end up with our total sales for the day: &lt;code&gt;271.41&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-2-2-deconstruct-the-function&#34;&gt;Step 2.2 — Deconstruct the function.&lt;/h3&gt;

&lt;p&gt;As it stands, &lt;code&gt;formToJSON()&lt;/code&gt; is actually made of three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;reducer function&lt;/em&gt; to combine our form elements into a single object.&lt;/li&gt;
&lt;li&gt;An initial value of &lt;code&gt;{}&lt;/code&gt; to hold our form data.&lt;/li&gt;
&lt;li&gt;A call to &lt;code&gt;reduce()&lt;/code&gt; using &lt;code&gt;call()&lt;/code&gt;, which allows us to force &lt;code&gt;reduce()&lt;/code&gt; to work with &lt;code&gt;elements&lt;/code&gt;, even though it&amp;rsquo;s &lt;em&gt;technically&lt;/em&gt; not an array.&lt;/li&gt;
&lt;/ol&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The form elements are actually what&amp;rsquo;s called an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection&#34;&gt;&lt;code&gt;HTMLFormControlsCollection&lt;/code&gt;&lt;/a&gt;, which is &amp;ldquo;array-like&amp;rdquo;, meaning it&amp;rsquo;s basically an array, but it&amp;rsquo;s missing some of the array methods, and has some of its own special properties and methods.&lt;/p&gt;
&lt;/aside&gt;

&lt;h3 id=&#34;step-2-3-write-the-reducer-function&#34;&gt;Step 2.3 — Write the reducer function.&lt;/h3&gt;

&lt;p&gt;First up, we need to have our reducer function. In the simple example of reducing an array, we used single values, which won&amp;rsquo;t work in this case. Instead, we want to add each field to an object with a format like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;field_name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;field_value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So our reducer function works like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// This is the function that is called on each element of the array.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reducerFunction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// Add the current field to the object.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// For the demo only: show each step in the reducer’s progress.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stringify&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; object is the previous value of the reducer, and &lt;code&gt;element&lt;/code&gt; is the current form element in the array. We then add a new property to the object using the element&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; property — this is the input&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; attribute in the HTML — and store its &lt;code&gt;value&lt;/code&gt; there.&lt;/p&gt;

&lt;p&gt;When we return &lt;code&gt;data&lt;/code&gt;, we make the updated object available to the next call of the funciton, which allows us to add each field to the object, one by one.&lt;/p&gt;

&lt;h3 id=&#34;step-2-4-call-the-reducer&#34;&gt;Step 2.4 — Call the reducer.&lt;/h3&gt;

&lt;p&gt;To make it a little more obvious what&amp;rsquo;s happening in the &lt;code&gt;formToJSON()&lt;/code&gt; function, here&amp;rsquo;s what it looks like if we break it up into more verbose code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON_deconstructed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// This is the function that is called on each element of the array.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reducerFunction&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    
    &lt;span style=&#34;color: #75715e&#34;&gt;// Add the current field to the object.&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    
    &lt;span style=&#34;color: #75715e&#34;&gt;// For the demo only: show each step in the reducer’s progress.&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stringify&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// This is used as the initial value of `data` in `reducerFunction()`.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reducerInitialValue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{};&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// To help visualize what happens, log the inital value.&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Initial `data` value:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stringify&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reducerInitialValue&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Now we reduce by `call`-ing `Array.prototype.reduce()` on `elements`.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formData&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reducerFunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;reducerInitialValue&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// The result is then returned for use elsewhere.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formData&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above example, we do exactly the same thing as in &lt;code&gt;formToJSON()&lt;/code&gt;, but we&amp;rsquo;ve broken it down into its component parts.&lt;/p&gt;

&lt;p&gt;We can see the output if we update &lt;code&gt;handleSubmit()&lt;/code&gt; and change the call to &lt;code&gt;formToJSON(form.elements)&lt;/code&gt; to &lt;code&gt;formToJSON_deconstructed(form.elements)&lt;/code&gt;. Check the console to see this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Initial `data` value: {}
{&amp;quot;salutation&amp;quot;:&amp;quot;Mr.&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Mrs.&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subject&amp;quot;:&amp;quot;I have a problem.&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subject&amp;quot;:&amp;quot;I have a problem.&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subject&amp;quot;:&amp;quot;I have a problem.&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;snacks&amp;quot;:&amp;quot;pizza&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subject&amp;quot;:&amp;quot;I have a problem.&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;snacks&amp;quot;:&amp;quot;cake&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subject&amp;quot;:&amp;quot;I have a problem.&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;snacks&amp;quot;:&amp;quot;cake&amp;quot;,&amp;quot;secret&amp;quot;:&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;}
{&amp;quot;salutation&amp;quot;:&amp;quot;Ms.&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subject&amp;quot;:&amp;quot;I have a problem.&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;snacks&amp;quot;:&amp;quot;cake&amp;quot;,&amp;quot;secret&amp;quot;:&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;,&amp;quot;&amp;quot;:&amp;quot;&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see here that the reducer is called for every form element, and the object grows with each subsequent call until we&amp;rsquo;ve got an entry for every &lt;code&gt;name&lt;/code&gt; value in the form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change &lt;code&gt;handleSubmit()&lt;/code&gt; back to using &lt;code&gt;formToJSON(form.elements)&lt;/code&gt;&lt;/strong&gt;, and let&amp;rsquo;s move on to cleaning up this output to only include fields it &lt;em&gt;should&lt;/em&gt; include.&lt;/p&gt;

&lt;h2 id=&#34;step-3-add-a-check-to-make-sure-only-the-fields-we-want-are-collected&#34;&gt;Step 3: Add a Check to Make Sure Only the Fields We Want Are Collected&lt;/h2&gt;

&lt;p&gt;The first problem we can see in the output is that fields with both empty &lt;code&gt;name&lt;/code&gt; and empty &lt;code&gt;value&lt;/code&gt; attributes have been added to the array. This isn&amp;rsquo;t what we want in this case, so we need to add a quick check to verify that fields have both a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;value&lt;/code&gt; before we add them.&lt;/p&gt;

&lt;h3 id=&#34;step-3-1-create-a-function-to-check-for-valid-elements&#34;&gt;Step 3.1 — Create a function to check for valid elements.&lt;/h3&gt;

&lt;p&gt;First, let&amp;rsquo;s add a new function to our pen called &lt;code&gt;isValidElement()&lt;/code&gt;. This function will accept one argument — the &lt;code&gt;element&lt;/code&gt; — and return either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To return &lt;code&gt;true&lt;/code&gt;, the element must have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A non-empty &lt;code&gt;name&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;A non-empty &lt;code&gt;value&lt;/code&gt; property.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Implement this check like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Checks that an element has a non-empty `name` and `value` property.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {Element} element  the element to check&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {Bool}             true if the element is an input, false if not&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidElement&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty simple, right?&lt;/p&gt;

&lt;p&gt;This gives us a flag that lets us avoid unused elements (like the button) and unfilled fields (such as an empty Email field) from being added to the form data object.&lt;/p&gt;

&lt;h3 id=&#34;step-3-2-add-the-check-to-formtojson&#34;&gt;Step 3.2 — Add the check to &lt;code&gt;formToJSON()&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;Next, we need to add an &lt;code&gt;if&lt;/code&gt; check for whether or not our &lt;code&gt;element&lt;/code&gt; is valid in &lt;code&gt;formToJSON()&lt;/code&gt;. Since we don&amp;rsquo;t want to add anything if the element is &lt;em&gt;not&lt;/em&gt; valid, we can simply do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Make sure the element has the required properties.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidElement&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when we submit our form, the output is much cleaner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;salutation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ms.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;snacks&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cake&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, we&amp;rsquo;re still not there yet. In the next step, we&amp;rsquo;ll deal with checkable elements like radio inputs and checkboxes.&lt;/p&gt;

&lt;h2 id=&#34;step-4-only-store-checkable-fields-if-a-field-is-in-checked-state&#34;&gt;Step 4: Only Store Checkable Fields If a Field Is In &lt;code&gt;checked&lt;/code&gt; State&lt;/h2&gt;

&lt;p&gt;Now we need another check to identify whether or not an element should be added to the array. For instance, right now the &lt;code&gt;salutation&lt;/code&gt; field is being stored with the value &lt;code&gt;Ms.&lt;/code&gt;, even though that value &lt;em&gt;is not selected&lt;/em&gt; in the form.&lt;/p&gt;

&lt;p&gt;Obviously, this is bad news. So let&amp;rsquo;s fix it.&lt;/p&gt;

&lt;h3 id=&#34;step-4-1-create-a-function-to-check-for-checkable-elements&#34;&gt;Step 4.1 — Create a function to check for checkable elements.&lt;/h3&gt;

&lt;p&gt;First, let&amp;rsquo;s add a new function to check whether or not an element&amp;rsquo;s value should be considered valid for inclusion in the object.&lt;/p&gt;

&lt;p&gt;Our criteria for determining a &amp;ldquo;valid&amp;rdquo; element are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The element is &lt;em&gt;not&lt;/em&gt; a checkbox or radio input.&lt;/li&gt;
&lt;li&gt;If the element &lt;em&gt;is&lt;/em&gt; a checkbox or radio input, it has the &lt;code&gt;checked&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add the following to create this check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Checks if an element’s value can be saved (e.g. not an unselected checkbox).&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {Element} element  the element to check&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {Boolean}          true if the value should be added, false if not&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidValue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;checkbox&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;radio&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;includes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;checked&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&#34;&gt;&lt;code&gt;includes()&lt;/code&gt;&lt;/a&gt; method is an easy way to see if a value is present in an array. I prefer this to multiple &lt;code&gt;if&lt;/code&gt; checks, switch statements, or other ways of matching a value against an array.&lt;/p&gt;
&lt;/aside&gt;

&lt;h3 id=&#34;step-4-2-add-the-check-to-formtojson&#34;&gt;Step 4.2 — Add the check to &lt;code&gt;formToJSON()&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;Now we can add this check to &lt;code&gt;formToJSON()&lt;/code&gt;, which is as simple as adding a second condition to our existing &lt;code&gt;if&lt;/code&gt; check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;// Make sure the element has the required properties and should be added.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidElement&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidValue&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can run our code and see that the output is much cleaner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is much better — now we only get elements that actually have a value set.&lt;/p&gt;

&lt;h2 id=&#34;step-5-if-a-field-allows-multiple-values-store-them-in-an-array&#34;&gt;Step 5: If a Field Allows Multiple Values, Store Them In an Array&lt;/h2&gt;

&lt;p&gt;But we&amp;rsquo;re not quite done yet, because the form is still fucking up the &lt;code&gt;snacks&lt;/code&gt; field — which is &lt;em&gt;clearly&lt;/em&gt; the most important field.&lt;/p&gt;

&lt;p&gt;Try selecting both &amp;ldquo;Pizza&amp;rdquo; and &amp;ldquo;Cake&amp;rdquo; to see the problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;snacks&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cake&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nope. This is a disaster. We need both pizza AND cake. So let&amp;rsquo;s make sure that can happen.&lt;/p&gt;

&lt;h3 id=&#34;step-5-1-create-checks-for-elements-that-accept-multiple-values&#34;&gt;Step 5.1 — Create checks for elements that accept multiple values.&lt;/h3&gt;

&lt;p&gt;The check for whether or not multiple values are allowed has two parts, because there are two elements that allow multiple values.&lt;/p&gt;

&lt;p&gt;First, we need to add a check for any checkboxes. This is simple enough: we just check if the &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;checkbox&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Checks if an input is a checkbox, because checkboxes allow multiple values.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {Element} element  the element to check&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {Boolean}          true if the element is a checkbox, false if not&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isCheckbox&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;checkbox&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Second, we need to add a check for a &lt;code&gt;select&lt;/code&gt; element with the &lt;code&gt;multiple&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;This is a bit trickier, but still pretty straightforward. A &lt;code&gt;select&lt;/code&gt; has a property called &lt;code&gt;options&lt;/code&gt;, so we&amp;rsquo;ll check for that first. Next, we check for the &lt;code&gt;multiple&lt;/code&gt; property. If both exist, our check will return &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Checks if an input is a `select` with the `multiple` attribute.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {Element} element  the element to check&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {Boolean}          true if the element is a multiselect, false if not&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isMultiSelect&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;multiple&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;step-5-2-handle-checkboxes-in-formtojson&#34;&gt;Step 5.2 — Handle checkboxes in &lt;code&gt;formToJSON()&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;Inside &lt;code&gt;formToJSON()&lt;/code&gt;, we need to add another &lt;code&gt;if&lt;/code&gt; block for our &lt;code&gt;isCheckbox()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;If the current element is a checkbox, we need to store its value(s) in an array. Let&amp;rsquo;s take a look at the code first, and then we&amp;rsquo;ll talk about how it works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// Make sure the element has the required properties and should be added.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidElement&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidValue&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * Some fields allow for more than one value, so we need to check if this&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * is one of those fields and, if so, store the values as an array.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isCheckbox&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      
      &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;concat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we need to get the element&amp;rsquo;s values into an array, we use a bit of shorthand in &lt;code&gt;(data[element.name] || [])&lt;/code&gt;, which means, &amp;ldquo;use the existing array, or a new, empty one&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Then we use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat&#34;&gt;&lt;code&gt;concat()&lt;/code&gt;&lt;/a&gt; to add the current value to the array.&lt;/p&gt;

&lt;p&gt;Now if we check the options for both pizza and cake, we see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;snacks&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pizza&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cake&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much better. Crisis averted, everyone!&lt;/p&gt;

&lt;h3 id=&#34;step-5-3-write-a-function-to-retrieve-values-from-multi-selects&#34;&gt;Step 5.3 — Write a function to retrieve values from multi-selects.&lt;/h3&gt;

&lt;p&gt;Our very last step before we can call this sucker done is to add a check for &lt;code&gt;select&lt;/code&gt; fields that support multiple selected options. I&amp;rsquo;m not a big fan of this input type, because I think it&amp;rsquo;s a confusing input for people to use — one that&amp;rsquo;s easily replaced with checkboxes — but for the sake of covering bases we&amp;rsquo;ll plug it in.&lt;/p&gt;

&lt;p&gt;The selected options from a multi-select are stored in their own array-like object, called an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection&#34;&gt;&lt;code&gt;HTMLOptionsCollection&lt;/code&gt;&lt;/a&gt;, so we need to run &lt;code&gt;reduce()&lt;/code&gt; on this as well.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s keep things clean by moving this out into its own function.&lt;/p&gt;

&lt;p&gt;This function will accept each options, check if the &lt;code&gt;selected&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;, then add its value to an array called &lt;code&gt;values&lt;/code&gt;, which will ultimately be returned containing the values of all selected options.&lt;/p&gt;

&lt;p&gt;Add the following to the pen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Retrieves the selected options from a multi-select as an array.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @param  {HTMLOptionsCollection} options  the options for the select&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * @return {Array}                          an array of selected option values&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getSelectValues&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;selected&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;concat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;step-5-4-handle-multi-select-values-in-formtojson&#34;&gt;Step 5.4 — Handle multi-select values in &lt;code&gt;formToJSON()&lt;/code&gt;.&lt;/h3&gt;

&lt;p&gt;To put a bow on all this, we need to add an &lt;code&gt;else if&lt;/code&gt; block in our &lt;code&gt;formToJSON()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;After the &lt;code&gt;isCheckbox()&lt;/code&gt; check, we&amp;rsquo;ll add a &lt;code&gt;isMultiSelect()&lt;/code&gt; check. If that returns &lt;code&gt;true&lt;/code&gt;, we&amp;rsquo;ll add the select&amp;rsquo;s values to the object as an array using &lt;code&gt;getSelectValues()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make the following updates to the pen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;formToJSON&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// Make sure the element has the required properties and should be added.&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isValidElement&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;isValidValue&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * Some fields allow for more than one value, so we need to check if this&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * is one of those fields and, if so, store the values as an array.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isCheckbox&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;concat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;isMultiSelect&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getSelectValues&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;run-a-quick-test-of-multi-select-values&#34;&gt;Run a quick test of multi-select values.&lt;/h4&gt;

&lt;p&gt;Since our current form doesn&amp;rsquo;t have a select with the &lt;code&gt;multiple&lt;/code&gt; attribute, so let&amp;rsquo;s quickly add that to the &lt;code&gt;subject&lt;/code&gt; field in our pen.&lt;/p&gt;

&lt;p&gt;Look for the &lt;code&gt;select&lt;/code&gt; in the HTML pane and add the &lt;code&gt;multiple&lt;/code&gt; attribute like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;      &lt;span style=&#34;color: #f92672&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;#subject.contact-form__input.contact-form__input--select&lt;/span&gt;(
        &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;multiple&lt;/span&gt;
      )
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can actually test. Click on both options and submit the form. The out put will now be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a general question.&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After we&amp;rsquo;ve tested, we can remove the &lt;code&gt;multiple&lt;/code&gt; attribute from the &lt;code&gt;select&lt;/code&gt; input.&lt;/p&gt;

&lt;aside class=&#34;article__aside&#34;&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Reading values from a multi-select isn&amp;rsquo;t supported in IE11 and below using this script. Personally, I would recommend just using checkboxes — I think multi-selects are a confusing user experience for many people — but if you need to support them in older browsers you&amp;rsquo;ll need to modify this code.&lt;/p&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;the-final-result-form-field-values-are-collected-in-an-object-for-use-as-json&#34;&gt;The Final Result: Form Field Values Are Collected in an Object for Use as JSON&lt;/h2&gt;

&lt;p&gt;At this point, we&amp;rsquo;ve built a small script that will extract the values from a form as an object literal, which can easily be converted to JSON using &lt;code&gt;JSON.stringify()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can test by filling out our form with dummy data and submitting it.&lt;/p&gt;

&lt;p&gt;Use your own fork of the pen, or enter dummy data in the form below:&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;976&#34; data-theme-id=&#34;dark&#34; data-slug-hash=&#34;YWJLwz&#34; data-default-tab=&#34;result&#34; data-user=&#34;jlengstorf&#34; data-embed-version=&#34;2&#34; class=&#34;codepen&#34;&gt;See the Pen &lt;a href=&#34;http://codepen.io/jlengstorf/pen/YWJLwz/&#34;&gt;How to Get Form Field Data as JSON Using Plain JavaScript&lt;/a&gt; by Jason Lengstorf (&lt;a href=&#34;http://codepen.io/jlengstorf&#34;&gt;@jlengstorf&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;After submitting, we&amp;rsquo;ll see the info we entered, and it&amp;rsquo;ll look something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;salutation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ms.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Pac-Man&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mspacman@example.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have a problem.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;These ghosts keep chasing me!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;snacks&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pizza&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cake&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1b3a9374-1a8e-434e-90ab-21aa7b9b80e7&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:homework&#34;&gt;And even if it&amp;rsquo;s not something we&amp;rsquo;d ever use in production, writing our own utility scripts is a fantastic way to increase our understanding of how things work. If we rely too much on a tool&amp;rsquo;s &amp;ldquo;magic&amp;rdquo; to make our apps work, it becomes &lt;em&gt;really&lt;/em&gt; hard to debug them when we find a problem that falls outside of the tool&amp;rsquo;s scope.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:homework&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>